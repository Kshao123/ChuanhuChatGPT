{
    "system": "You are a helpful assistant.",
    "history": [
        {
            "role": "user",
            "content": "将下面这段 python 转换为 node\n\nimport json\nimport re\n\nimport httpx\n\nfrom .base import BaseParser, VideoAuthor, VideoInfo\n\n\nclass DouYin(BaseParser):\n    \"\"\"\n    抖音 / 抖音火山版\n    \"\"\"\n\n    async def parse_share_url(self, share_url: str) -> VideoInfo:\n        # 支持电脑网页版链接 https://www.douyin.com/video/xxxxxx\n        if share_url.startswith(\"https://www.douyin.com/video/\"):\n            video_id = share_url.strip(\"/\").split(\"/\")[-1]\n            share_url = self._get_request_url_by_video_id(video_id)\n\n        async with httpx.AsyncClient(follow_redirects=True) as client:\n            response = await client.get(share_url, headers=self.get_default_headers())\n            response.raise_for_status()\n\n        pattern = re.compile(\n            pattern=r\"window\\._ROUTER_DATA\\s*=\\s*(.*?)</script>\",\n            flags=re.DOTALL,\n        )\n        find_res = pattern.search(response.text)\n\n        if not find_res or not find_res.group(1):\n            raise ValueError(\"parse video json info from html fail\")\n\n        json_data = json.loads(find_res.group(1).strip())\n        original_video_info = json_data[\"loaderData\"][\"video_(id)/page\"][\"videoInfoRes\"]\n\n        # 如果没有视频信息，获取并抛出异常\n        if len(original_video_info[\"item_list\"]) == 0:\n            err_detail_msg = \"failed to parse video info from HTML\"\n            if len(filter_list := original_video_info[\"filter_list\"]) > 0:\n                err_detail_msg = filter_list[0][\"detail_msg\"]\n            raise Exception(err_detail_msg)\n\n        data = original_video_info[\"item_list\"][0]\n\n        # 获取图集图片地址\n        images = []\n        # 如果data含有 images，并且 images 是一个列表\n        if \"images\" in data and isinstance(data[\"images\"], list):\n            # 获取每个图片的url_list中的第一个元素，非空时添加到images列表中\n            for img in data[\"images\"]:\n                if (\n                    \"url_list\" in img\n                    and isinstance(img[\"url_list\"], list)\n                    and len(img[\"url_list\"]) > 0\n                    and len(img[\"url_list\"][0]) > 0\n                ):\n                    images.append(img[\"url_list\"][0])\n\n        # 获取视频播放地址\n        video_url = data[\"video\"][\"play_addr\"][\"url_list\"][0].replace(\"playwm\", \"play\")\n        # 如果图集地址不为空时，因为没有视频，上面抖音返回的视频地址无法访问，置空处理\n        if len(images) > 0:\n            video_url = \"\"\n\n        # 获取重定向后的mp4视频地址\n        # 图集时，视频地址为空，不处理\n        video_mp4_url = \"\"\n        if len(video_url) > 0:\n            video_mp4_url = await self.get_video_redirect_url(video_url)\n\n        video_info = VideoInfo(\n            video_url=video_mp4_url,\n            cover_url=data[\"video\"][\"cover\"][\"url_list\"][0],\n            title=data[\"desc\"],\n            images=images,\n            author=VideoAuthor(\n                uid=data[\"author\"][\"sec_uid\"],\n                name=data[\"author\"][\"nickname\"],\n                avatar=data[\"author\"][\"avatar_thumb\"][\"url_list\"][0],\n            ),\n        )\n        return video_info\n\n    async def get_video_redirect_url(self, video_url: str) -> str:\n        async with httpx.AsyncClient(follow_redirects=False) as client:\n            response = await client.get(video_url, headers=self.get_default_headers())\n        # 返回重定向后的地址，如果没有重定向则返回原地址(抖音中的西瓜视频,重定向地址为空)\n        return response.headers.get(\"location\") or video_url\n\n    async def parse_video_id(self, video_id: str) -> VideoInfo:\n        req_url = self._get_request_url_by_video_id(video_id)\n        return await self.parse_share_url(req_url)\n\n    def _get_request_url_by_video_id(self, video_id) -> str:\n        return f\"https://www.iesdouyin.com/share/video/{video_id}/\"\n"
        },
        {
            "role": "assistant",
            "content": "Here's the Node.js equivalent of the provided Python code:\n\n```javascript\nconst axios = require('axios');\nconst cheerio = require('cheerio');\n\nclass BaseParser {\n  getDefaultHeaders() {\n    // Implement this method as needed\n  }\n}\n\nclass VideoAuthor {\n  constructor(uid, name, avatar) {\n    this.uid = uid;\n    this.name = name;\n    this.avatar = avatar;\n  }\n}\n\nclass VideoInfo {\n  constructor(video_url, cover_url, title, images, author) {\n    this.video_url = video_url;\n    this.cover_url = cover_url;\n    this.title = title;\n    this.images = images;\n    this.author = author;\n  }\n}\n\nclass DouYin extends BaseParser {\n  async parseShareUrl(shareUrl) {\n    if (shareUrl.startsWith(\"https://www.douyin.com/video/\")) {\n      const videoId = shareUrl.trim(\"/\").split(\"/\").pop();\n      shareUrl = this._getRequestUrlByVideoId(videoId);\n    }\n\n    const response = await axios.get(shareUrl, {\n      headers: this.getDefaultHeaders(),\n      maxRedirects: 5,\n    });\n\n    const $ = cheerio.load(response.data);\n    const scriptContent = $('script:contains(\"window._ROUTER_DATA\")').html();\n\n    if (!scriptContent) {\n      throw new Error(\"parse video json info from html fail\");\n    }\n\n    const jsonMatch = scriptContent.match(/window\\._ROUTER_DATA\\s*=\\s*(.*?)<\\/script>/s);\n    if (!jsonMatch || !jsonMatch[1]) {\n      throw new Error(\"parse video json info from html fail\");\n    }\n\n    const jsonData = JSON.parse(jsonMatch[1].trim());\n    const originalVideoInfo = jsonData.loaderData[\"video_(id)/page\"].videoInfoRes;\n\n    if (originalVideoInfo.item_list.length === 0) {\n      let errDetailMsg = \"failed to parse video info from HTML\";\n      if (originalVideoInfo.filter_list.length > 0) {\n        errDetailMsg = originalVideoInfo.filter_list[0].detail_msg;\n      }\n      throw new Error(errDetailMsg);\n    }\n\n    const data = originalVideoInfo.item_list[0];\n\n    const images = [];\n    if (data.images && Array.isArray(data.images)) {\n      for (const img of data.images) {\n        if (img.url_list && Array.isArray(img.url_list) && img.url_list.length > 0 && img.url_list[0].length > 0) {\n          images.push(img.url_list[0]);\n        }\n      }\n    }\n\n    let videoUrl = data.video.play_addr.url_list[0].replace(\"playwm\", \"play\");\n    if (images.length > 0) {\n      videoUrl = \"\";\n    }\n\n    let videoMp4Url = \"\";\n    if (videoUrl.length > 0) {\n      videoMp4Url = await this.getVideoRedirectUrl(videoUrl);\n    }\n\n    const videoInfo = new VideoInfo(\n      videoMp4Url,\n      data.video.cover.url_list[0],\n      data.desc,\n      images,\n      new VideoAuthor(\n        data.author.sec_uid,\n        data.author.nickname,\n        data.author.avatar_thumb.url_list[0]\n      )\n    );\n\n    return videoInfo;\n  }\n\n  async getVideoRedirectUrl(videoUrl) {\n    try {\n      const response = await axios.get(videoUrl, {\n        headers: this.getDefaultHeaders(),\n        maxRedirects: 0,\n        validateStatus: (status) => status >= 200 && status < 400,\n      });\n      return response.headers.location || videoUrl;\n    } catch (error) {\n      if (error.response && error.response.headers.location) {\n        return error.response.headers.location;\n      }\n      return videoUrl;\n    }\n  }\n\n  async parseVideoId(videoId) {\n    const reqUrl = this._getRequestUrlByVideoId(videoId);\n    return await this.parseShareUrl(reqUrl);\n  }\n\n  _getRequestUrlByVideoId(videoId) {\n    return `https://www.iesdouyin.com/share/video/${videoId}/`;\n  }\n}\n\nmodule.exports = DouYin;\n```\n\nThis Node.js version uses `axios` for HTTP requests and `cheerio` for HTML parsing. You'll need to install these dependencies:\n\n```\nnpm install axios cheerio\n```\n\nNote that some adjustments might be necessary depending on your specific use case and environment. Also, make sure to implement the `getDefaultHeaders()` method in the `BaseParser` class according to your needs."
        }
    ],
    "chatbot": [
        [
            "<div class=\"user-message\">将下面这段 python 转换为 node<br><br>import json<br>import re<br><br>import httpx<br><br>from &#46;base import BaseParser, VideoAuthor, VideoInfo<br><br><br>class DouYin&#40;BaseParser&#41;&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;抖音 / 抖音火山版<br>&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;async def parse&#95;share&#95;url&#40;self, share&#95;url&#58; str&#41; &#45;&#62; VideoInfo&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#35; 支持电脑网页版链接 https&#58;//www&#46;douyin&#46;com/video/xxxxxx<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if share&#95;url&#46;startswith&#40;&quot;https&#58;//www&#46;douyin&#46;com/video/&quot;&#41;&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video&#95;id = share&#95;url&#46;strip&#40;&quot;/&quot;&#41;&#46;split&#40;&quot;/&quot;&#41;&#91;&#45;1&#93;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;share&#95;url = self&#46;&#95;get&#95;request&#95;url&#95;by&#95;video&#95;id&#40;video&#95;id&#41;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;async with httpx&#46;AsyncClient&#40;follow&#95;redirects=True&#41; as client&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response = await client&#46;get&#40;share&#95;url, headers=self&#46;get&#95;default&#95;headers&#40;&#41;&#41;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response&#46;raise&#95;for&#95;status&#40;&#41;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pattern = re&#46;compile&#40;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pattern=r&quot;window\\&#46;&#95;ROUTER&#95;DATA\\s&#42;=\\s&#42;&#40;&#46;&#42;?&#41;&#60;/script&#62;&quot;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flags=re&#46;DOTALL,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#41;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;find&#95;res = pattern&#46;search&#40;response&#46;text&#41;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not find&#95;res or not find&#95;res&#46;group&#40;1&#41;&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise ValueError&#40;&quot;parse video json info from html fail&quot;&#41;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;json&#95;data = json&#46;loads&#40;find&#95;res&#46;group&#40;1&#41;&#46;strip&#40;&#41;&#41;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;original&#95;video&#95;info = json&#95;data&#91;&quot;loaderData&quot;&#93;&#91;&quot;video&#95;&#40;id&#41;/page&quot;&#93;&#91;&quot;videoInfoRes&quot;&#93;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#35; 如果没有视频信息，获取并抛出异常<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if len&#40;original&#95;video&#95;info&#91;&quot;item&#95;list&quot;&#93;&#41; == 0&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err&#95;detail&#95;msg = &quot;failed to parse video info from HTML&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if len&#40;filter&#95;list &#58;= original&#95;video&#95;info&#91;&quot;filter&#95;list&quot;&#93;&#41; &#62; 0&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err&#95;detail&#95;msg = filter&#95;list&#91;0&#93;&#91;&quot;detail&#95;msg&quot;&#93;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise Exception&#40;err&#95;detail&#95;msg&#41;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = original&#95;video&#95;info&#91;&quot;item&#95;list&quot;&#93;&#91;0&#93;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#35; 获取图集图片地址<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;images = &#91;&#93;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#35; 如果data含有 images，并且 images 是一个列表<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if &quot;images&quot; in data and isinstance&#40;data&#91;&quot;images&quot;&#93;, list&#41;&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#35; 获取每个图片的url&#95;list中的第一个元素，非空时添加到images列表中<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for img in data&#91;&quot;images&quot;&#93;&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if &#40;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;url&#95;list&quot; in img<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and isinstance&#40;img&#91;&quot;url&#95;list&quot;&#93;, list&#41;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and len&#40;img&#91;&quot;url&#95;list&quot;&#93;&#41; &#62; 0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and len&#40;img&#91;&quot;url&#95;list&quot;&#93;&#91;0&#93;&#41; &#62; 0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#41;&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;images&#46;append&#40;img&#91;&quot;url&#95;list&quot;&#93;&#91;0&#93;&#41;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#35; 获取视频播放地址<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video&#95;url = data&#91;&quot;video&quot;&#93;&#91;&quot;play&#95;addr&quot;&#93;&#91;&quot;url&#95;list&quot;&#93;&#91;0&#93;&#46;replace&#40;&quot;playwm&quot;, &quot;play&quot;&#41;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#35; 如果图集地址不为空时，因为没有视频，上面抖音返回的视频地址无法访问，置空处理<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if len&#40;images&#41; &#62; 0&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video&#95;url = &quot;&quot;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#35; 获取重定向后的mp4视频地址<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#35; 图集时，视频地址为空，不处理<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video&#95;mp4&#95;url = &quot;&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if len&#40;video&#95;url&#41; &#62; 0&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video&#95;mp4&#95;url = await self&#46;get&#95;video&#95;redirect&#95;url&#40;video&#95;url&#41;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video&#95;info = VideoInfo&#40;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video&#95;url=video&#95;mp4&#95;url,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cover&#95;url=data&#91;&quot;video&quot;&#93;&#91;&quot;cover&quot;&#93;&#91;&quot;url&#95;list&quot;&#93;&#91;0&#93;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title=data&#91;&quot;desc&quot;&#93;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;images=images,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;author=VideoAuthor&#40;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uid=data&#91;&quot;author&quot;&#93;&#91;&quot;sec&#95;uid&quot;&#93;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=data&#91;&quot;author&quot;&#93;&#91;&quot;nickname&quot;&#93;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avatar=data&#91;&quot;author&quot;&#93;&#91;&quot;avatar&#95;thumb&quot;&#93;&#91;&quot;url&#95;list&quot;&#93;&#91;0&#93;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#41;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#41;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return video&#95;info<br><br>&nbsp;&nbsp;&nbsp;&nbsp;async def get&#95;video&#95;redirect&#95;url&#40;self, video&#95;url&#58; str&#41; &#45;&#62; str&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;async with httpx&#46;AsyncClient&#40;follow&#95;redirects=False&#41; as client&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response = await client&#46;get&#40;video&#95;url, headers=self&#46;get&#95;default&#95;headers&#40;&#41;&#41;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#35; 返回重定向后的地址，如果没有重定向则返回原地址&#40;抖音中的西瓜视频,重定向地址为空&#41;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return response&#46;headers&#46;get&#40;&quot;location&quot;&#41; or video&#95;url<br><br>&nbsp;&nbsp;&nbsp;&nbsp;async def parse&#95;video&#95;id&#40;self, video&#95;id&#58; str&#41; &#45;&#62; VideoInfo&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req&#95;url = self&#46;&#95;get&#95;request&#95;url&#95;by&#95;video&#95;id&#40;video&#95;id&#41;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return await self&#46;parse&#95;share&#95;url&#40;req&#95;url&#41;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;def &#95;get&#95;request&#95;url&#95;by&#95;video&#95;id&#40;self, video&#95;id&#41; &#45;&#62; str&#58;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return f&quot;https&#58;//www&#46;iesdouyin&#46;com/share/video/&#123;video&#95;id&#125;/&quot;<br></div>",
            "<div class=\"raw-message hideM\"><pre class=\"fake-pre\">Here's the Node&#46;js equivalent of the provided Python code&#58;<br><br>&#96;&#96;&#96;javascript<br>const axios = require&#40;'axios'&#41;;<br>const cheerio = require&#40;'cheerio'&#41;;<br><br>class BaseParser &#123;<br>  getDefaultHeaders&#40;&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;// Implement this method as needed<br>  &#125;<br>&#125;<br><br>class VideoAuthor &#123;<br>  constructor&#40;uid, name, avatar&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;this&#46;uid = uid;<br>&nbsp;&nbsp;&nbsp;&nbsp;this&#46;name = name;<br>&nbsp;&nbsp;&nbsp;&nbsp;this&#46;avatar = avatar;<br>  &#125;<br>&#125;<br><br>class VideoInfo &#123;<br>  constructor&#40;video&#95;url, cover&#95;url, title, images, author&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;this&#46;video&#95;url = video&#95;url;<br>&nbsp;&nbsp;&nbsp;&nbsp;this&#46;cover&#95;url = cover&#95;url;<br>&nbsp;&nbsp;&nbsp;&nbsp;this&#46;title = title;<br>&nbsp;&nbsp;&nbsp;&nbsp;this&#46;images = images;<br>&nbsp;&nbsp;&nbsp;&nbsp;this&#46;author = author;<br>  &#125;<br>&#125;<br><br>class DouYin extends BaseParser &#123;<br>  async parseShareUrl&#40;shareUrl&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;if &#40;shareUrl&#46;startsWith&#40;&quot;https&#58;//www&#46;douyin&#46;com/video/&quot;&#41;&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;  const videoId = shareUrl&#46;trim&#40;&quot;/&quot;&#41;&#46;split&#40;&quot;/&quot;&#41;&#46;pop&#40;&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;  shareUrl = this&#46;&#95;getRequestUrlByVideoId&#40;videoId&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;const response = await axios&#46;get&#40;shareUrl, &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;  headers&#58; this&#46;getDefaultHeaders&#40;&#41;,<br>&nbsp;&nbsp;&nbsp;&nbsp;  maxRedirects&#58; 5,<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;&#41;;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;const &#36; = cheerio&#46;load&#40;response&#46;data&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;const scriptContent = &#36;&#40;'script&#58;contains&#40;&quot;window&#46;&#95;ROUTER&#95;DATA&quot;&#41;'&#41;&#46;html&#40;&#41;;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;if &#40;&#33;scriptContent&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;  throw new Error&#40;&quot;parse video json info from html fail&quot;&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;const jsonMatch = scriptContent&#46;match&#40;/window\\&#46;&#95;ROUTER&#95;DATA\\s&#42;=\\s&#42;&#40;&#46;&#42;?&#41;&#60;\\/script&#62;/s&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;if &#40;&#33;jsonMatch &#124;&#124; &#33;jsonMatch&#91;1&#93;&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;  throw new Error&#40;&quot;parse video json info from html fail&quot;&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;const jsonData = JSON&#46;parse&#40;jsonMatch&#91;1&#93;&#46;trim&#40;&#41;&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;const originalVideoInfo = jsonData&#46;loaderData&#91;&quot;video&#95;&#40;id&#41;/page&quot;&#93;&#46;videoInfoRes;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;if &#40;originalVideoInfo&#46;item&#95;list&#46;length === 0&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;  let errDetailMsg = &quot;failed to parse video info from HTML&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;  if &#40;originalVideoInfo&#46;filter&#95;list&#46;length &#62; 0&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errDetailMsg = originalVideoInfo&#46;filter&#95;list&#91;0&#93;&#46;detail&#95;msg;<br>&nbsp;&nbsp;&nbsp;&nbsp;  &#125;<br>&nbsp;&nbsp;&nbsp;&nbsp;  throw new Error&#40;errDetailMsg&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;const data = originalVideoInfo&#46;item&#95;list&#91;0&#93;;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;const images = &#91;&#93;;<br>&nbsp;&nbsp;&nbsp;&nbsp;if &#40;data&#46;images && Array&#46;isArray&#40;data&#46;images&#41;&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;  for &#40;const img of data&#46;images&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if &#40;img&#46;url&#95;list && Array&#46;isArray&#40;img&#46;url&#95;list&#41; && img&#46;url&#95;list&#46;length &#62; 0 && img&#46;url&#95;list&#91;0&#93;&#46;length &#62; 0&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  images&#46;push&#40;img&#46;url&#95;list&#91;0&#93;&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&nbsp;&nbsp;&nbsp;&nbsp;  &#125;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;let videoUrl = data&#46;video&#46;play&#95;addr&#46;url&#95;list&#91;0&#93;&#46;replace&#40;&quot;playwm&quot;, &quot;play&quot;&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;if &#40;images&#46;length &#62; 0&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;  videoUrl = &quot;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;let videoMp4Url = &quot;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;if &#40;videoUrl&#46;length &#62; 0&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;  videoMp4Url = await this&#46;getVideoRedirectUrl&#40;videoUrl&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;const videoInfo = new VideoInfo&#40;<br>&nbsp;&nbsp;&nbsp;&nbsp;  videoMp4Url,<br>&nbsp;&nbsp;&nbsp;&nbsp;  data&#46;video&#46;cover&#46;url&#95;list&#91;0&#93;,<br>&nbsp;&nbsp;&nbsp;&nbsp;  data&#46;desc,<br>&nbsp;&nbsp;&nbsp;&nbsp;  images,<br>&nbsp;&nbsp;&nbsp;&nbsp;  new VideoAuthor&#40;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data&#46;author&#46;sec&#95;uid,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data&#46;author&#46;nickname,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data&#46;author&#46;avatar&#95;thumb&#46;url&#95;list&#91;0&#93;<br>&nbsp;&nbsp;&nbsp;&nbsp;  &#41;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#41;;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;return videoInfo;<br>  &#125;<br><br>  async getVideoRedirectUrl&#40;videoUrl&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;try &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;  const response = await axios&#46;get&#40;videoUrl, &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers&#58; this&#46;getDefaultHeaders&#40;&#41;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxRedirects&#58; 0,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;validateStatus&#58; &#40;status&#41; =&#62; status &#62;= 200 && status &#60; 400,<br>&nbsp;&nbsp;&nbsp;&nbsp;  &#125;&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;  return response&#46;headers&#46;location &#124;&#124; videoUrl;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125; catch &#40;error&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;  if &#40;error&#46;response && error&#46;response&#46;headers&#46;location&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return error&#46;response&#46;headers&#46;location;<br>&nbsp;&nbsp;&nbsp;&nbsp;  &#125;<br>&nbsp;&nbsp;&nbsp;&nbsp;  return videoUrl;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>  &#125;<br><br>  async parseVideoId&#40;videoId&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;const reqUrl = this&#46;&#95;getRequestUrlByVideoId&#40;videoId&#41;;<br>&nbsp;&nbsp;&nbsp;&nbsp;return await this&#46;parseShareUrl&#40;reqUrl&#41;;<br>  &#125;<br><br>  &#95;getRequestUrlByVideoId&#40;videoId&#41; &#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;return &#96;https&#58;//www&#46;iesdouyin&#46;com/share/video/&#36;&#123;videoId&#125;/&#96;;<br>  &#125;<br>&#125;<br><br>module&#46;exports = DouYin;<br>&#96;&#96;&#96;<br><br>This Node&#46;js version uses &#96;axios&#96; for HTTP requests and &#96;cheerio&#96; for HTML parsing&#46; You'll need to install these dependencies&#58;<br><br>&#96;&#96;&#96;<br>npm install axios cheerio<br>&#96;&#96;&#96;<br><br>Note that some adjustments might be necessary depending on your specific use case and environment&#46; Also, make sure to implement the &#96;getDefaultHeaders&#40;&#41;&#96; method in the &#96;BaseParser&#96; class according to your needs&#46;</pre></div><div class=\"md-message\">\n\nHere's the Node.js equivalent of the provided Python code:\n\n\n```javascript\nconst axios = require('axios');\nconst cheerio = require('cheerio');\n\nclass BaseParser {\n  getDefaultHeaders() {\n    // Implement this method as needed\n  }\n}\n\nclass VideoAuthor {\n  constructor(uid, name, avatar) {\n    this.uid = uid;\n    this.name = name;\n    this.avatar = avatar;\n  }\n}\n\nclass VideoInfo {\n  constructor(video_url, cover_url, title, images, author) {\n    this.video_url = video_url;\n    this.cover_url = cover_url;\n    this.title = title;\n    this.images = images;\n    this.author = author;\n  }\n}\n\nclass DouYin extends BaseParser {\n  async parseShareUrl(shareUrl) {\n    if (shareUrl.startsWith(\"https://www.douyin.com/video/\")) {\n      const videoId = shareUrl.trim(\"/\").split(\"/\").pop();\n      shareUrl = this._getRequestUrlByVideoId(videoId);\n    }\n\n    const response = await axios.get(shareUrl, {\n      headers: this.getDefaultHeaders(),\n      maxRedirects: 5,\n    });\n\n    const $ = cheerio.load(response.data);\n    const scriptContent = $('script:contains(\"window._ROUTER_DATA\")').html();\n\n    if (!scriptContent) {\n      throw new Error(\"parse video json info from html fail\");\n    }\n\n    const jsonMatch = scriptContent.match(/window\\._ROUTER_DATA\\s*=\\s*(.*?)<\\/script>/s);\n    if (!jsonMatch || !jsonMatch[1]) {\n      throw new Error(\"parse video json info from html fail\");\n    }\n\n    const jsonData = JSON.parse(jsonMatch[1].trim());\n    const originalVideoInfo = jsonData.loaderData[\"video_(id)/page\"].videoInfoRes;\n\n    if (originalVideoInfo.item_list.length === 0) {\n      let errDetailMsg = \"failed to parse video info from HTML\";\n      if (originalVideoInfo.filter_list.length > 0) {\n        errDetailMsg = originalVideoInfo.filter_list[0].detail_msg;\n      }\n      throw new Error(errDetailMsg);\n    }\n\n    const data = originalVideoInfo.item_list[0];\n\n    const images = [];\n    if (data.images && Array.isArray(data.images)) {\n      for (const img of data.images) {\n        if (img.url_list && Array.isArray(img.url_list) && img.url_list.length > 0 && img.url_list[0].length > 0) {\n          images.push(img.url_list[0]);\n        }\n      }\n    }\n\n    let videoUrl = data.video.play_addr.url_list[0].replace(\"playwm\", \"play\");\n    if (images.length > 0) {\n      videoUrl = \"\";\n    }\n\n    let videoMp4Url = \"\";\n    if (videoUrl.length > 0) {\n      videoMp4Url = await this.getVideoRedirectUrl(videoUrl);\n    }\n\n    const videoInfo = new VideoInfo(\n      videoMp4Url,\n      data.video.cover.url_list[0],\n      data.desc,\n      images,\n      new VideoAuthor(\n        data.author.sec_uid,\n        data.author.nickname,\n        data.author.avatar_thumb.url_list[0]\n      )\n    );\n\n    return videoInfo;\n  }\n\n  async getVideoRedirectUrl(videoUrl) {\n    try {\n      const response = await axios.get(videoUrl, {\n        headers: this.getDefaultHeaders(),\n        maxRedirects: 0,\n        validateStatus: (status) => status >= 200 && status < 400,\n      });\n      return response.headers.location || videoUrl;\n    } catch (error) {\n      if (error.response && error.response.headers.location) {\n        return error.response.headers.location;\n      }\n      return videoUrl;\n    }\n  }\n\n  async parseVideoId(videoId) {\n    const reqUrl = this._getRequestUrlByVideoId(videoId);\n    return await this.parseShareUrl(reqUrl);\n  }\n\n  _getRequestUrlByVideoId(videoId) {\n    return `https://www.iesdouyin.com/share/video/${videoId}/`;\n  }\n}\n\nmodule.exports = DouYin;\n\n```\n\nThis Node.js version uses `axios` for HTTP requests and `cheerio` for HTML parsing. You'll need to install these dependencies:\n\n\n```\nnpm install axios cheerio\n\n```\n\nNote that some adjustments might be necessary depending on your specific use case and environment. Also, make sure to implement the `getDefaultHeaders()` method in the `BaseParser` class according to your needs.\n</div>"
        ]
    ],
    "model_name": "claude-3-5-sonnet-20240620",
    "single_turn": false,
    "temperature": 1.0,
    "top_p": 1.0,
    "n_choices": 1,
    "stop_sequence": [],
    "token_upper_limit": 4096,
    "max_generation_token": null,
    "presence_penalty": 0.0,
    "frequency_penalty": 0.0,
    "logit_bias": null,
    "user_identifier": "",
    "metadata": {}
}